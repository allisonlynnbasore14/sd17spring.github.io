"""Create _site/dates.yml with reading journal dates from the course calendar sheet."""
import os
import re

import dateutil
import numpy as np
import pandas as pd
import yaml

PROJECT_HOME = os.path.join(os.path.dirname(__file__), '..')
calendar_url = yaml.load(open(os.path.join(PROJECT_HOME, '_config.yml')))['course']['calendar_url']
df = pd.read_html(calendar_url, header=1)[0]

# read_html treats a merged cell as a single cell, which throws the columns out of whack.
# Fix this by transposing the table in order to extract each row as a Series, inserting an empty cell in front of Week
# indices that appear to be date strings, and building a new table from of these rows.

# each row of the original table is a column of the transpose. The variable is named to match the original table.
rows = [pd.Series(list(r[:1]) + [np.nan] + list(r[1:-1]), index=r.index) if re.match(r'.+,.+', r['Week']) else r
        for r in [df.transpose()[i] for i in df.index]
        if not all(pd.isnull(r))]
df2 = pd.DataFrame(rows)

# parse the string dates into date objects
df2['Date'] = df2['Date'].apply(lambda s: dateutil.parser.parse(s).date())

rdf = df2.set_index('Date')
rs = df2.set_index('Date')['Reading Due']
rs = rs[pd.notnull(rs) & ~rs.str.contains('no reading', case=False).fillna(False)]

with open(os.path.join(PROJECT_HOME, '_data/readings.yml'), 'w') as f:
    f.write("# This file is automatically generated. Run %s to re-create it.\n" % os.path.basename(__file__))
    yaml.dump([{'due_date': d,
                'summary': r.replace('Think Python', 'TP').replace(' Ch. ', ' ').replace('TP 2', 'TP'),
                'description': r}
               for d, r in rs.items()], f, default_flow_style=False)
